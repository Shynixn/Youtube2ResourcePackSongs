@file:Suppress("CAST_NEVER_SUCCEEDS")

package com.github.shynixn.youtube2resourcepacksongs.gui.swing

import com.github.shynixn.youtube2resourcepacksongs.api.Youtube2ResourcePackSongsApi
import com.github.shynixn.youtube2resourcepacksongs.api.entity.Progress
import com.github.shynixn.youtube2resourcepacksongs.gui.entity.Configuration
import com.github.shynixn.youtube2resourcepacksongs.gui.impl.Logger
import java.awt.EventQueue
import java.awt.Font
import java.nio.file.Paths
import javax.swing.*


/**
 * Created by Shynixn 2020.
 * <p>
 * Version 1.5
 * <p>
 * MIT License
 * <p>
 * Copyright (c) 2020 by Shynixn
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
internal class GuiFrame(
    private val configuration: Configuration
) : JFrame() {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private fun initComponents() {
        setLocationRelativeTo(null);
        progressBarMain = JProgressBar()
        progressBarMainMessage = JLabel()
        jLabel1 = JLabel()
        textFieldInputCsv = JTextField()
        buttonInputSelect = JButton()
        textFieldOutputResourcePack = JTextField()
        buttonOutputSelect = JButton()
        buttonStart = JButton()
        defaultCloseOperation = WindowConstants.EXIT_ON_CLOSE
        title = "Youtube2ResourcePackSongs"
        isResizable = false
        progressBarMainMessage!!.text = "This is message to be displayed on this view."
        jLabel1!!.font = Font("Arial", 0, 14) // NOI18N
        jLabel1!!.text = "Youtube2ResourcePackSongs by Shynixn"
        textFieldInputCsv!!.text = "C:/Demo/input.csv"
        buttonInputSelect!!.text = "Select"
        textFieldOutputResourcePack!!.text = "C:/Demo/output.zip"
        buttonOutputSelect!!.text = "Select"
        buttonStart!!.text = "Generate"
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(
                                    progressBarMainMessage,
                                    GroupLayout.PREFERRED_SIZE,
                                    319,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(
                                    buttonStart,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addGroup(
                                    layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addGroup(
                                            layout.createSequentialGroup()
                                                .addComponent(
                                                    textFieldOutputResourcePack,
                                                    GroupLayout.PREFERRED_SIZE,
                                                    261,
                                                    GroupLayout.PREFERRED_SIZE
                                                )
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(
                                                    buttonOutputSelect,
                                                    GroupLayout.PREFERRED_SIZE,
                                                    99,
                                                    GroupLayout.PREFERRED_SIZE
                                                )
                                        )
                                        .addGroup(
                                            layout.createSequentialGroup()
                                                .addComponent(
                                                    textFieldInputCsv,
                                                    GroupLayout.PREFERRED_SIZE,
                                                    261,
                                                    GroupLayout.PREFERRED_SIZE
                                                )
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(
                                                    buttonInputSelect,
                                                    GroupLayout.PREFERRED_SIZE,
                                                    99,
                                                    GroupLayout.PREFERRED_SIZE
                                                )
                                        )
                                )
                                .addComponent(
                                    progressBarMain,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap(13, Short.MAX_VALUE.toInt())
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(
                                    textFieldInputCsv,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(buttonInputSelect)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(
                                    textFieldOutputResourcePack,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(buttonOutputSelect)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonStart)
                        .addGap(18, 18, 18)
                        .addComponent(
                            progressBarMain,
                            GroupLayout.PREFERRED_SIZE,
                            24,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressBarMainMessage)
                        .addContainerGap(26, Short.MAX_VALUE.toInt())
                )
        )
        pack()
    } // </editor-fold>

    // Variables declaration - do not modify
    private var buttonInputSelect: JButton? = null
    private var buttonOutputSelect: JButton? = null
    var buttonStart: JButton? = null
    private var jLabel1: JLabel? = null
    private var progressBarMain: JProgressBar? = null
    private var progressBarMainMessage: JLabel? = null
    private var textFieldInputCsv: JTextField? = null
    private var textFieldOutputResourcePack: JTextField? = null // End of variables declaration

    companion object {
        /**
         * @param args the command line arguments
         */
        @JvmStatic
        fun showGUI(configuration: Configuration): GuiFrame { /* Create and display the form */
            val guiFrame = GuiFrame(configuration)
            EventQueue.invokeLater {
                guiFrame.isVisible = true
                guiFrame.textFieldInputCsv!!.text = configuration.inputFilePath.toFile().absolutePath
                guiFrame.textFieldOutputResourcePack!!.text = configuration.outputFilePath.toFile().absolutePath
            }
            return guiFrame
        }
    }

    /**
     * Creates new form GuiFrame
     */
    init {
        initComponents()
        buttonInputSelect!!.addActionListener {
            val fileDialog = JFileChooser()

            if (fileDialog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                this.textFieldInputCsv!!.text = fileDialog.selectedFile.absolutePath
            }
        }
        buttonOutputSelect!!.addActionListener {
            val fileDialog = JFileChooser()

            if (fileDialog.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                this.textFieldOutputResourcePack!!.text = fileDialog.selectedFile.absolutePath
            }
        }
        buttonStart!!.addActionListener {
            try {
                this.buttonStart!!.isEnabled = false
                val inputPath = Paths.get(this.textFieldInputCsv!!.text)
                val outputPath = Paths.get(this.textFieldOutputResourcePack!!.text)
                Youtube2ResourcePackSongsApi.convertAsync(inputPath.toFile(), outputPath.toFile()) { progress ->
                    updateProgress(progress)
                    Logger.info(progress.message + ": " + progress.value + "%")
                }.exceptionally { e ->
                    setProgressMessage("Error. See latest.log for details.")
                    Logger.error(e)
                    null
                }.thenAccept {
                    this.buttonStart!!.isEnabled = true
                }
            } catch (e: Exception) {
                this.progressBarMainMessage!!.text = "File paths are invalid."
            }
        }
    }

    /**
     * Sets the progress message.
     */
    fun setProgressMessage(message: String) {
        this.progressBarMainMessage!!.text = message
    }

    /**
     * Updates the progress shown.
     */
    fun updateProgress(progress: Progress) {
        this.progressBarMainMessage!!.text = progress.message
        this.progressBarMain!!.value = progress.value
    }
}